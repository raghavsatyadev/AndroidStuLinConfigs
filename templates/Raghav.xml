<templateSet group="Raghav">
  <template name="alogef" value="AppLog.INSTANCE.loge(false, &quot;$FileName$&quot;, &quot;$MethodName$&quot;, e, new Exception());" description="Error log with Applog#loge" toReformat="true" toShortenFQNames="true">
    <variable name="FileName" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="MethodName" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogek" value="AppLog.loge(false, kotlinFileName, &quot;$MethodName$&quot;, e, Exception())" description="Error log with Applog#loge" toReformat="true" toShortenFQNames="true">
    <variable name="MethodName" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogsk" value="AppLog.loge(true, kotlinFileName, &quot;$MethodName$&quot;, $Statement$, Exception())" description="Object log with Applog#logs" toReformat="true" toShortenFQNames="true">
    <variable name="MethodName" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="Statement" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogs" value="AppLog.INSTANCE.loge(true, &quot;$ClassName$&quot;, &quot;$MethodName$&quot;, $Statement$, new Exception());" description="Object log with Applog#logs" toReformat="true" toShortenFQNames="true">
    <variable name="ClassName" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="MethodName" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <variable name="Statement" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="kdoc" value=" /**&#10; * $Statement$&#10; */" description="add Kdoc implementation" toReformat="true" toShortenFQNames="true">
    <variable name="Statement" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
      <option name="KOTLIN_EXPRESSION" value="true" />
      <option name="KOTLIN_STATEMENT" value="true" />
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="alogt" value="AppLog.INSTANCE.loge(false, &quot;$FileName$&quot;, &quot;$MethodName$&quot;, throwable, new Exception());" description="Throwable log with Applog#logt" toReformat="true" toShortenFQNames="true">
    <variable name="FileName" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="MethodName" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogtk" value="AppLog.loge(false, kotlinFileName, &quot;$MethodName$&quot;, throwable, Exception())" description="Throwable log with Applog#logt" toReformat="true" toShortenFQNames="true">
    <variable name="MethodName" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogesk" value="val e = Exception($Statement$)&#10;AppLog.loge(false, kotlinFileName, &quot;$MethodName$&quot;, e, e)" description="Error log with Applog#loge for custom exception" toReformat="true" toShortenFQNames="true">
    <variable name="Statement" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MethodName" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="snack" value="Snackbar.make(binding.root, $Statement$, Snackbar.LENGTH_LONG).show()" description="Creates a normal Snackbar call with binding.root" toReformat="false" toShortenFQNames="true">
    <variable name="Statement" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="setupFrag" value="import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.viewModels&#10;import io.github.raghavsatyadev.support.core.CoreFragment&#10;import io.github.raghavsatyadev.support.core.CoreViewModel&#10;&#10;class $FragmentName$Fragment : CoreFragment&lt;Fragment$FragmentName$Binding&gt;() {&#10;    private val viewModel: $FragmentName$ViewModel by viewModels()&#10;    private val args: $FragmentName$FragmentArgs by navArgs()&#10;&#10;    override fun createReference(view: View, savedInstanceState: Bundle?) {&#10;    }&#10;&#10;    override fun createBinding(&#10;        layoutInflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?,&#10;    ) = Fragment$FragmentName$Binding.inflate(layoutInflater, container, false)&#10;&#10;    override fun setListeners(isEnabled: Boolean) {&#10;    }&#10;&#10;    override fun getProgressBar() = binding.loader&#10;}&#10;&#10;class $FragmentName$ViewModel : CoreViewModel() {&#10;}" description="sets up fragment with CoreFragment and ViewModel" toReformat="true" toShortenFQNames="true">
    <variable name="FragmentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="setupAdapter" value="class $ItemName$Adapter :&#10;    GenRecyclerAdapter&lt;$ModelName$, Item$ItemName$Binding, $ItemName$Holder&gt;() {&#10;    override fun creatingViewHolder(&#10;        parent: ViewGroup,&#10;        viewType: Int,&#10;        from: LayoutInflater,&#10;    ): $ItemName$Holder {&#10;        return $ItemName$Holder.getInstance(Item$ItemName$Binding.inflate(from, parent, false),&#10;            itemClickListener)&#10;    }&#10;}&#10;&#10;class $ItemName$Holder(&#10;    binding: Item$ItemName$Binding,&#10;    itemClickListener: CustomClickListener?,&#10;) : GenObjectHolder&lt;$ModelName$, Item$ItemName$Binding&gt;(binding, itemClickListener) {&#10;    companion object {&#10;        fun getInstance(&#10;            binding: Item$ItemName$Binding,&#10;            itemClickListener: CustomClickListener?,&#10;        ): $ItemName$Holder {&#10;            return $ItemName$Holder(binding, itemClickListener)&#10;        }&#10;    }&#10;&#10;    override fun bind(model: $ModelName$, itemViewType: Int, position: Int, itemCount: Int) {&#10;        with(binding) {&#10;            with(model) {&#10;&#10;            }&#10;        }&#10;    }&#10;}" description="sets up Adapter and Holder class with Generic Classes" toReformat="true" toShortenFQNames="true">
    <variable name="ItemName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ModelName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gint" value="companion object {&#10;    fun getIntentObject(&#10;        context: Context,&#10;        bundle: Bundle = Bundle.EMPTY,&#10;    ): Intent = Intent(context, $ClassName$::class.java).apply { putExtras(bundle) }&#10;}" description="write getIntent method for Activity" toReformat="true" toShortenFQNames="true">
    <variable name="ClassName" expression="kotlinClassName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="alogStack" value="AppLog.logE(log: $Message$, stackTrace: e.stackTrace);" description="AppLog.logE implementation with stack trace" toReformat="true" toShortenFQNames="true">
    <variable name="Message" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="aloge" value="AppLog.logE(log: $Message$);" description="AppLog.logE implementation" toReformat="true" toShortenFQNames="true">
    <variable name="Message" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogd" value="AppLog.logD(log: $Message$);" description="AppLog.logD implementation" toReformat="true" toShortenFQNames="true">
    <variable name="Message" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogw" value="AppLog.logW(log: $Message$);" description="AppLog.logW implementation" toReformat="true" toShortenFQNames="true">
    <variable name="Message" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="tag" value="public static final String TAG = $ClassName$.class.getSimpleName();" description="adds TAG implementation" toReformat="true" toShortenFQNames="true">
    <variable name="ClassName" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="slog" value="AppUtility.showToastLogDebug($STATEMENT$);" description="Adds Snackbar and Log both" toReformat="false" toShortenFQNames="true">
    <variable name="STATEMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="fuhori" value="app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;app:layout_constraintStart_toStartOf=&quot;parent&quot;" description="Adds horizontal constraints to expand fully" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
  <template name="setupXML" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;$ClassName$&quot;&#10;    &gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:padding=&quot;15dp&quot;&#10;        &gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;    &lt;include&#10;        android:id=&quot;@+id/loader&quot;&#10;        layout=&quot;@layout/loader&quot;&#10;        /&gt;&#10;&lt;/RelativeLayout&gt;" description="sets up XML with loader and parent ConstraintLayout" toReformat="true" toShortenFQNames="true">
    <variable name="ClassName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="setupDao" value="import kotlinx.coroutines.flow.Flow&#10;import io.github.raghavsatyadev.support.Constants&#10;&#10;class $Class$DataUtil : BaseDataUtil&lt;$Class$, $Class$DataUtil.$Class$Dao&gt;() {&#10;    companion object {&#10;        @Volatile&#10;        private var instance: $Class$DataUtil? = null&#10;&#10;        @Synchronized&#10;        fun getInstance(): $Class$DataUtil {&#10;            if (instance == null) instance = $Class$DataUtil()&#10;            return instance!!&#10;        }&#10;    }&#10;&#10;    override fun getDao(): $Class$Dao {&#10;        return RoomDBUtil.getDatabase().$SmallClass$Dao()&#10;    }&#10;&#10;    override fun getTableName(): String {&#10;        return Constants.DB.Tables.$BigClass$_TABLE&#10;    }&#10;&#10;    override fun getPrimaryKey(): String {&#10;        return Constants.FieldKeys.$BigClass$_ID&#10;    }&#10;&#10;    fun getAllLive(): Flow&lt;ArrayList&lt;$Class$&gt;&gt; {&#10;        return getDao()&#10;            .getAllLive(SimpleSQLiteQuery(&quot;SELECT * FROM `${getTableName()}`&quot;))&#10;            .map { value: List&lt;$Class$&gt; -&gt; ArrayList(value) }&#10;    }&#10;&#10;    @Dao&#10;    abstract class $Class$Dao : BaseDao&lt;$Class$&gt; {&#10;        @RawQuery(observedEntities = [$Class$::class])&#10;        abstract fun getAllLive(simpleSQLiteQuery: SimpleSQLiteQuery): Flow&lt;List&lt;$Class$&gt;&gt;&#10;    }&#10;}" description="sets up Room Data Util with Dao" toReformat="true" toShortenFQNames="true">
    <variable name="Class" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SmallClass" expression="camelCase(Class)" defaultValue="Class" alwaysStopAt="false" />
    <variable name="BigClass" expression="capitalizeAndUnderscore(Class)" defaultValue="Class" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="setupActi" value="import android.content.Context&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.viewModels&#10;import io.github.raghavsatyadev.support.core.CoreActivity&#10;import io.github.raghavsatyadev.support.core.CoreViewModel&#10;&#10;class $ActivityName$Activity : CoreActivity&lt;Activity$ActivityName$Binding&gt;() {&#10;    private val viewModel: $ActivityName$ViewModel by viewModels()&#10;&#10;    companion object {&#10;        fun getIntentObject(&#10;            context: Context,&#10;            bundle: Bundle = Bundle.EMPTY,&#10;        ): Intent =&#10;            Intent(context, $ActivityName$Activity::class.java).apply { putExtras(bundle) }&#10;    }&#10;&#10;&#10;    override fun createReference(savedInstanceState: Bundle?) {&#10;&#10;    }&#10;&#10;    override fun createBinding(savedInstanceState: Bundle?) =&#10;        Activity$ActivityName$Binding.inflate(layoutInflater)&#10;&#10;    override fun setListeners(isEnabled: Boolean) = Unit&#10;}&#10;&#10;class $ActivityName$ViewModel : CoreViewModel() {&#10;&#10;}" description="sets up activity with CoreActivity and ViewModel" toReformat="true" toShortenFQNames="true">
    <variable name="ActivityName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="setupAdXML" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;$ContextClass$&quot;&#10;    &gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:padding=&quot;15dp&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/ad_view&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        &gt;&#10;        &#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;    &lt;com.google.android.gms.ads.AdView&#10;        android:id=&quot;@+id/ad_view&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        /&gt;&#10;&#10;    &lt;include&#10;        android:id=&quot;@+id/loader&quot;&#10;        layout=&quot;@layout/loader&quot;&#10;        /&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" description="sets up XML with loader, adView and parent ConstraintLayout" toReformat="true" toShortenFQNames="true">
    <variable name="ContextClass" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="fuver" value="app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;app:layout_constraintTop_toTopOf=&quot;parent&quot;" description="Adds vertical constraints to expand fully" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
  <template name="fullexp" value="app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;app:layout_constraintTop_toTopOf=&quot;parent&quot;" description="Adds constraints to expand fully" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
</templateSet>